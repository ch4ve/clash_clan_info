# Conte√∫do NOVO e COMPLETO de pages/5_üó∫Ô∏è_Mapa_da_Guerra_CWL.py

import streamlit as st
from datetime import datetime, timezone
from utils.coc_api import get_cwl_current_war_details, get_scouting_report

st.set_page_config(page_title="Mapa da Guerra (CWL)", page_icon="üó∫Ô∏è", layout="wide")
st.title("üó∫Ô∏è An√°lise Estrat√©gica da CWL")

if 'clan_tag' not in st.session_state or not st.session_state['clan_tag']:
    st.warning("‚¨ÖÔ∏è Por favor, insira uma tag de cl√£ na p√°gina principal para come√ßar.")
    st.page_link("app.py", label="Ir para a p√°gina principal", icon="üè†")
else:
    # Separa a p√°gina em abas
    tab1, tab2 = st.tabs(["Guerra de Hoje", "üïµÔ∏è Espionar Oponente de Amanh√£"])

    # --- ABA 1: GUERRA DE HOJE ---
    with tab1:
        try:
            clan_tag = st.session_state['clan_tag']
            coc_email = st.secrets["coc_email"]
            coc_password = st.secrets["coc_password"]
            
            with st.spinner("Buscando dados da guerra do dia..."):
                # A fun√ß√£o agora retorna 5 valores
                war_summary, df_clan, df_opponent, _, _ = get_cwl_current_war_details(clan_tag, coc_email, coc_password)

            if war_summary is None:
                st.info("N√£o foi poss√≠vel encontrar uma guerra da liga em andamento ou em prepara√ß√£o.")
            else:
                # (O resto do c√≥digo desta aba continua o mesmo de antes)
                st.header(f"Guerra do Dia contra: {war_summary['opponent_name']}")
                # ... (c√≥digo do placar, tempo restante, etc.) ...
                col1, col2 = st.columns(2)
                with col1:
                    st.subheader("Nosso Cl√£")
                    st.dataframe(df_clan, hide_index=True)
                with col2:
                    st.subheader("Cl√£ Oponente")
                    st.dataframe(df_opponent, hide_index=True)

        except Exception as e:
            st.error(f"Erro ao buscar dados da API: {e}")

    # --- ABA 2: ESPIONAGEM ---
    with tab2:
        st.header("An√°lise Preditiva do Pr√≥ximo Oponente")
        
        if st.button("Gerar Relat√≥rio de Espionagem"):
            try:
                clan_tag = st.session_state['clan_tag']
                coc_email = st.secrets["coc_email"]
                coc_password = st.secrets["coc_password"]
                
                with st.spinner("Coletando informa√ß√µes do pr√≥ximo oponente... Isso pode levar alguns minutos."):
                    df_our_clan, df_predicted_opponent, next_opponent_name = get_scouting_report(clan_tag, coc_email, coc_password)

                if df_predicted_opponent is None:
                    st.error(f"N√£o foi poss√≠vel gerar o relat√≥rio: {next_opponent_name}")
                else:
                    st.success(f"Relat√≥rio gerado para a guerra de amanh√£ contra: {next_opponent_name}")
                    st.warning("AVISO: A escala√ß√£o do oponente √© uma **previs√£o** baseada na guerra que ele est√° jogando hoje. Eles podem alterar a escala√ß√£o para a guerra contra n√≥s amanh√£.")
                    st.divider()

                    col1, col2 = st.columns(2)
                    with col1:
                        st.subheader("Nossa Escala√ß√£o (Hoje)")
                        st.dataframe(df_our_clan, hide_index=True)
                    with col2:
                        st.subheader(f"Escala√ß√£o Prov√°vel de '{next_opponent_name}'")
                        st.dataframe(df_predicted_opponent, hide_index=True)
            except Exception as e:
                st.error(f"Erro ao gerar relat√≥rio: {e}")
