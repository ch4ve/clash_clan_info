# Conte√∫do COMPLETO e ATUALIZADO de pages/5_üó∫Ô∏è_Mapa_da_Guerra_CWL.py

import streamlit as st
import pandas as pd
from datetime import datetime, timezone
# Importamos a fun√ß√£o para listar os cl√£s
from utils.coc_api import get_cwl_current_war_details, get_cwl_group_clans

st.set_page_config(page_title="Mapa da Guerra (CWL)", page_icon="üó∫Ô∏è", layout="wide")
st.title("üó∫Ô∏è An√°lise Estrat√©gica da CWL")

if 'clan_tag' not in st.session_state or not st.session_state['clan_tag']:
    st.warning("‚¨ÖÔ∏è Por favor, insira uma tag de cl√£ na p√°gina principal para come√ßar.")
    st.page_link("app.py", label="Ir para a p√°gina principal", icon="üè†")
else:
    try:
        clan_tag = st.session_state['clan_tag']
        coc_email = st.secrets["coc_email"]
        coc_password = st.secrets["coc_password"]

        # --- NOVO BLOCO: LISTA DE CL√ÉS DO GRUPO ---
        with st.expander("üìñ Ver todos os cl√£s do grupo da Liga"):
            with st.spinner("Buscando lista de cl√£s..."):
                all_clans_in_group = get_cwl_group_clans(clan_tag, coc_email, coc_password)
                
                if not all_clans_in_group:
                    st.warning("N√£o foi poss√≠vel carregar a lista de cl√£s do grupo.")
                else:
                    # Cria uma lista de dicion√°rios para o DataFrame
                    clans_list = [{'Nome do Cl√£': clan.name, 'Tag': clan.tag} for clan in all_clans_in_group]
                    df_clans = pd.DataFrame(clans_list)
                    st.dataframe(df_clans, hide_index=True)
        
        st.divider()

        # --- BLOCO 2: GUERRA DE HOJE (Seu Cl√£) ---
        st.header("Guerra de Hoje")
        
        with st.spinner("Buscando dados da sua guerra do dia..."):
            war_summary, df_clan, df_opponent, _, _ = get_cwl_current_war_details(clan_tag, coc_email, coc_password)

        if war_summary is None:
            st.info("N√£o foi poss√≠vel encontrar a sua guerra da liga em andamento ou em prepara√ß√£o.")
        else:
            # (O c√≥digo para exibir sua guerra do dia continua o mesmo)
            st.subheader(f"Sua Guerra contra: {war_summary['opponent_name']}")
            # ... (c√≥digo do tempo restante, etc.) ...
            col1, col2 = st.columns(2)
            with col1:
                st.subheader(f"Cl√£: {war_summary['clan_name']}")
                st.dataframe(df_clan, hide_index=True)
            with col2:
                st.subheader(f"Oponente: {war_summary['opponent_name']}")
                st.dataframe(df_opponent, hide_index=True)

        st.divider()

        # --- BLOCO 3: ESPIONAGEM ESPEC√çFICA (COM MENU DE SELE√á√ÉO) ---
        st.header("üïµÔ∏è Espionar Guerra de Outro Cl√£ da Liga")

        if not all_clans_in_group:
            st.warning("Lista de cl√£s indispon√≠vel para espionagem.")
        else:
            # Cria um mapa de Nome -> Tag e filtra para mostrar apenas os oponentes
            opponent_map = {clan.name: clan.tag for clan in all_clans_in_group if clan.tag != clan_tag}
            
            # Cria o menu de sele√ß√£o com os nomes dos oponentes
            selected_opponent_name = st.selectbox(
                "Selecione um cl√£ do seu grupo para espionar:",
                options=opponent_map.keys()
            )

            if st.button("Buscar Guerra Espec√≠fica"):
                if selected_opponent_name:
                    # Pega a tag correspondente ao nome selecionado
                    scout_tag = opponent_map[selected_opponent_name]
                    
                    with st.spinner(f"Buscando a guerra atual de '{selected_opponent_name}'..."):
                        scout_summary, scout_df1, scout_df2, _, _ = get_cwl_current_war_details(scout_tag, coc_email, coc_password)
                    
                    if scout_summary is None:
                        st.error(f"N√£o foi poss√≠vel encontrar uma guerra em andamento para o cl√£ '{selected_opponent_name}'.")
                    else:
                        st.subheader(f"Resultado da Espionagem: {scout_summary['clan_name']} vs {scout_summary['opponent_name']}")
                        
                        col3, col4 = st.columns(2)
                        with col3:
                            st.subheader(f"Cl√£: {scout_summary['clan_name']}")
                            st.dataframe(scout_df1, hide_index=True)
                        with col4:
                            st.subheader(f"Oponente: {scout_summary['opponent_name']}")
                            st.dataframe(scout_df2, hide_index=True)

    except Exception as e:
        st.error(f"Ocorreu um erro inesperado: {e}")
